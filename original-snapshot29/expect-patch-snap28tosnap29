Index: expect-5.21/CHANGES.NT
diff -c expect-5.21/CHANGES.NT:1.23 expect-5.21/CHANGES.NT:1.25
*** expect-5.21/CHANGES.NT:1.23	Wed Jan  6 02:27:20 1999
--- expect-5.21/CHANGES.NT	Thu Apr 15 01:36:57 1999
***************
*** 1,3 ****
--- 1,7 ----
+ * Incorporate a memory leak fix from expect 5.28.
+ 
+ * Fixed resource leaks introduced by non-blocking close fix in snapshot 28.
+ 
  * Updated tests to use quimby.cs.berkeley.edu instead of the retired
    odie.cs.berkeley.edu
  
Index: expect-5.21/generic/expect.c
diff -c expect-5.21/generic/expect.c:1.5 expect-5.21/generic/expect.c:1.6
*** expect-5.21/generic/expect.c:1.5	Tue Aug 26 08:32:53 1997
--- expect-5.21/generic/expect.c	Thu Apr 15 01:36:31 1999
***************
*** 869,874 ****
--- 869,878 ----
  		       sizeof(struct exp_cmd_descriptor *));
  	    }
  	    ecmd->ecd.count--;
+ 	    if (0 == ecmd->ecd.count) {
+ 		ckfree((char *)ecmd->ecd.cases);
+ 		ecmd->ecd.cases = 0;
+ 	    }
  	} else {
  	    i++;
  	}
Index: tcl8.0/win/tclWinPipe.c
diff -c tcl8.0/win/tclWinPipe.c:1.19 tcl8.0/win/tclWinPipe.c:1.21
*** tcl8.0/win/tclWinPipe.c:1.19	Wed Jan  6 00:38:17 1999
--- tcl8.0/win/tclWinPipe.c	Thu Apr 15 01:54:54 1999
***************
*** 2249,2257 ****
  	 * There is currently a small race--the handles could possibly be
  	 * closed twice.
  	 */
! 	if (TclWinReaderDestroy(pipePtr->readerInfo)) {
! 	    TclWinReaderFree(pipePtr->readerInfo);
! 	}
  	if (TclpCloseFile(pipePtr->readFile) != 0) {
  	    errorCode = errno;
  	}
--- 2249,2255 ----
  	 * There is currently a small race--the handles could possibly be
  	 * closed twice.
  	 */
! 	TclWinReaderDestroy(pipePtr->readerInfo);
  	if (TclpCloseFile(pipePtr->readFile) != 0) {
  	    errorCode = errno;
  	}
***************
*** 2270,2318 ****
  	}
  	pipePtr->refCount--;
      }
      result = TclCleanupChildren(interp, pipePtr->numPids, pipePtr->pidPtr,
              errChan);
  
!     PipeFreeProc((ClientData) pipePtr);
  
      if (errorCode == 0) {
          return result;
      }
      return errorCode;
- }
- /*
-  *----------------------------------------------------------------------
-  *
-  * PipeFreeProc --
-  *
-  *	This callback is invoked by Tcl_FreeFile in order to delete
-  *	the notifier data associated with a file handle.
-  *
-  * Results:
-  *	None.
-  *
-  * Side effects:
-  *	Removes the PipeInfo from the global pipe list.
-  *
-  *----------------------------------------------------------------------
-  */
- 
- static void
- PipeFreeProc(clientData)
-     ClientData clientData;
- {
-     PipeInfo *pipePtr = (PipeInfo *) clientData;
- 
-     if (--pipePtr->refCount > 0) {
- 	return;
-     }
-     if (pipePtr->readerInfo) {
- 	TclWinReaderFree(pipePtr->readerInfo);
-     }
-     if (pipePtr->numPids > 0) {
-         ckfree((char *) pipePtr->pidPtr);
-     }
-     ckfree((char *) pipePtr);
  }
  
  /*
--- 2268,2289 ----
  	}
  	pipePtr->refCount--;
      }
+     if (pipePtr->readerInfo != NULL) {
+ 	TclWinReaderFree(pipePtr->readerInfo);
+ 	pipePtr->readerInfo = NULL;
+     }
      result = TclCleanupChildren(interp, pipePtr->numPids, pipePtr->pidPtr,
              errChan);
  
!     if (pipePtr->numPids > 0) {
!         ckfree((char *) pipePtr->pidPtr);
!     }
!     ckfree((char *) pipePtr);
  
      if (errorCode == 0) {
          return result;
      }
      return errorCode;
  }
  
  /*
Index: tcl8.0/win/tclWinReader.c
diff -c tcl8.0/win/tclWinReader.c:1.13 tcl8.0/win/tclWinReader.c:1.14
*** tcl8.0/win/tclWinReader.c:1.13	Wed Jan  6 02:28:54 1999
--- tcl8.0/win/tclWinReader.c	Thu Apr 15 01:21:11 1999
***************
*** 101,108 ****
      infoPtr->rGoEvent = NULL;
      infoPtr->rHandleClosed = FALSE;
  
-     infoPtr->refCount = 1;
- 
      return infoPtr;
  }
  
--- 101,106 ----
***************
*** 127,159 ****
  TclWinReaderFree(infoPtr)
      TclWinReaderInfo *infoPtr;
  {
!     if (--infoPtr->refCount <= 0) {
! 	if (infoPtr->rSemaphore != NULL) {
! 	    CloseHandle(infoPtr->rSemaphore);
! 	    infoPtr->rSemaphore = NULL;
! 	}
! 	if (infoPtr->rOverResult.hEvent != NULL) {
! 	    CloseHandle(infoPtr->rOverResult.hEvent);
! 	    infoPtr->rOverResult.hEvent = NULL;
! 	}
! 	if (infoPtr->rEvent != NULL) {
! 	    CloseHandle(infoPtr->rEvent);
! 	    infoPtr->rEvent = NULL;
! 	}
! 	if (infoPtr->rGoEvent != NULL) {
! 	    CloseHandle(infoPtr->rGoEvent);
! 	    infoPtr->rGoEvent = NULL;
! 	}
! 	if (infoPtr->rThread != NULL) {
! 	    CloseHandle(infoPtr->rThread);
! 	    infoPtr->rThread = NULL;
! 	}
  
! 	if (infoPtr->rData) {
! 	    ckfree(infoPtr->rData);
! 	}
! 	ckfree((char *) infoPtr);
      }
  }
  
  /*
--- 125,155 ----
  TclWinReaderFree(infoPtr)
      TclWinReaderInfo *infoPtr;
  {
!     if (infoPtr->rSemaphore != NULL) {
! 	CloseHandle(infoPtr->rSemaphore);
! 	infoPtr->rSemaphore = NULL;
!     }
!     if (infoPtr->rOverResult.hEvent != NULL) {
! 	CloseHandle(infoPtr->rOverResult.hEvent);
! 	infoPtr->rOverResult.hEvent = NULL;
!     }
!     if (infoPtr->rEvent != NULL) {
! 	CloseHandle(infoPtr->rEvent);
! 	infoPtr->rEvent = NULL;
!     }
!     if (infoPtr->rGoEvent != NULL) {
! 	CloseHandle(infoPtr->rGoEvent);
! 	infoPtr->rGoEvent = NULL;
!     }
!     if (infoPtr->rThread != NULL) {
! 	CloseHandle(infoPtr->rThread);
! 	infoPtr->rThread = NULL;
!     }
  
!     if (infoPtr->rData) {
! 	ckfree(infoPtr->rData);
      }
+     ckfree((char *) infoPtr);
  }
  
  /*
***************
*** 232,242 ****
      }
      infoPtr->rData = ckalloc(READER_BUFFER_SIZE);
  
-     infoPtr->refCount++;
      infoPtr->rThread = CreateThread(NULL, 0, threadProc, infoPtr, 0,
  				     &threadId);
      if (infoPtr->rThread == NULL) {
- 	--infoPtr->refCount;
  	goto error;
      }
  
--- 228,236 ----
***************
*** 402,408 ****
  	SetEvent(infoPtr->rEvent);
      }
  
-     TclWinReaderFree(infoPtr);
      ExitThread(0);
      return 0;
  }
--- 396,401 ----
Index: Mitel/blt/demos/barchart
diff -c blt8.0-unoff/demos/barchart:1.1.1.1 blt8.0-unoff/demos/barchart:1.2
*** blt8.0-unoff/demos/barchart:1.1.1.1	Thu Aug 20 22:59:07 1998
--- blt8.0-unoff/demos/barchart	Thu Apr 15 01:22:25 1999
***************
*** 24,30 ****
  option add *graph.xTitle "X Axis Label"
  option add *graph.yTitle "Y Axis Label"
  option add *graph.title "A Simple Barchart"
! option add *graph.xFont "Times 10"
  option add *graph.elemBackground white
  option add *graph.elemRelief raised
  option add *graph.legendMapped false
--- 24,32 ----
  option add *graph.xTitle "X Axis Label"
  option add *graph.yTitle "Y Axis Label"
  option add *graph.title "A Simple Barchart"
! option add *graph.yTitleFont "Times 10"
! option add *graph.xTitleFont "Times 10"
! option add *graph.font "Times 20"
  option add *graph.elemBackground white
  option add *graph.elemRelief raised
  option add *graph.legendMapped false
Index: blt8.0-unoff/generic/bltPie.c
diff -c blt8.0-unoff/generic/bltPie.c:1.1.1.1 blt8.0-unoff/generic/bltPie.c:1.2
*** blt8.0-unoff/generic/bltPie.c:1.1.1.1	Thu Aug 20 22:59:11 1998
--- blt8.0-unoff/generic/bltPie.c	Thu Apr 15 01:23:45 1999
***************
*** 308,315 ****
  	    /* text wider than window - (have X) clip it */
  	    x = piePtr->borderWidth + PADDING;
  	}
! 	XDrawString(Tk_Display(tkwin), Tk_WindowId(tkwin),
! 	    piePtr->textGC, x, fh , piePtr->title, tlength);
      }
    
      piePtr->displaybits = 0;
--- 308,316 ----
  	    /* text wider than window - (have X) clip it */
  	    x = piePtr->borderWidth + PADDING;
  	}
! 	Tk_DrawChars(Tk_Display(tkwin), Tk_WindowId(tkwin),
! 	    piePtr->textGC, (Tk_Font) piePtr->textGC->font,
! 	    piePtr->title, tlength, x, fh);
      }
    
      piePtr->displaybits = 0;
***************
*** 455,463 ****
  		    sprintf(valuestr, "%.2f%%", 100.0 *
  			piePtr->elements[i].value / piePtr->total_value);
  		    sprintf (textstr, "%*.*s", pWidth, pWidth, valuestr);
! 		    XDrawString(disp, draw,
! 			piePtr->textGC, x, y + rheight - PADDING * 2,
! 			textstr, pWidth);
  		    x += piePtr->percentwidth;
  		    break;
  		}
--- 456,465 ----
  		    sprintf(valuestr, "%.2f%%", 100.0 *
  			piePtr->elements[i].value / piePtr->total_value);
  		    sprintf (textstr, "%*.*s", pWidth, pWidth, valuestr);
! 		    Tk_DrawChars(disp, draw,
! 			piePtr->textGC, (Tk_Font) piePtr->textGC->font, 
! 			textstr, pWidth,
! 			x, y + rheight - PADDING * 2);
  		    x += piePtr->percentwidth;
  		    break;
  		}
***************
*** 467,475 ****
  		    sprintf(formatstr, "%%.%df", piePtr->numdigits);
  		    sprintf(valuestr, formatstr, piePtr->elements[i].value);
  		    sprintf (textstr, "%*.*s", vWidth, vWidth, valuestr);
! 		    XDrawString(disp, draw,
! 			piePtr->textGC, x, y + rheight - PADDING * 2,
! 			textstr, vWidth);
  		    x += piePtr->valuewidth;
  		    break;
  		}
--- 469,478 ----
  		    sprintf(formatstr, "%%.%df", piePtr->numdigits);
  		    sprintf(valuestr, formatstr, piePtr->elements[i].value);
  		    sprintf (textstr, "%*.*s", vWidth, vWidth, valuestr);
! 		    Tk_DrawChars(disp, draw,
! 			piePtr->textGC, (Tk_Font) piePtr->textGC->font,
! 			textstr, vWidth,
! 			x, y + rheight - PADDING * 2);
  		    x += piePtr->valuewidth;
  		    break;
  		}
***************
*** 479,488 ****
  			int tlength;
  
  			tlength = strlen(piePtr->elements[i].label);
! 			XDrawString(disp, draw,
! 			    piePtr->textGC, 
! 			    x, y + rheight - PADDING * 2,
! 			    piePtr->elements[i].label, tlength);
  		    }
  		    x += piePtr->textwidth;
  		    break;
--- 482,491 ----
  			int tlength;
  
  			tlength = strlen(piePtr->elements[i].label);
! 			Tk_DrawChars(disp, draw,
! 			    piePtr->textGC, (Tk_Font) piePtr->textGC->font,
! 			    piePtr->elements[i].label, tlength,
! 			    x, y + rheight - PADDING * 2);
  		    }
  		    x += piePtr->textwidth;
  		    break;
Index: blt8.0-unoff/generic/bltText.c
diff -c blt8.0-unoff/generic/bltText.c:1.1.1.1 blt8.0-unoff/generic/bltText.c:1.2
*** blt8.0-unoff/generic/bltText.c:1.1.1.1	Thu Aug 20 22:59:10 1998
--- blt8.0-unoff/generic/bltText.c	Thu Apr 15 01:23:46 1999
***************
*** 110,116 ****
  	    if (length > 0) {
  		justifyX = x + JustifyOffset(attrPtr, text, length,
  		    (int *)NULL);
! 		XDrawString(display, draw, gc, justifyX, y, text, length);
  	    }
  	    y += lineHeight;
  	    text = p + 1;	/* Start the text on the next line */
--- 110,117 ----
  	    if (length > 0) {
  		justifyX = x + JustifyOffset(attrPtr, text, length,
  		    (int *)NULL);
! 		Tk_DrawChars(display, draw, gc, (Tk_Font) gc->font,
! 			     text, length, justifyX, y);
  	    }
  	    y += lineHeight;
  	    text = p + 1;	/* Start the text on the next line */
***************
*** 121,127 ****
      }
      if ((length > 0) && (*(p - 1) != '\n')) {
  	justifyX = x + JustifyOffset(attrPtr, text, length, (int *)NULL);
! 	XDrawString(display, draw, gc, justifyX, y, text, length);
      }
  }
  
--- 122,129 ----
      }
      if ((length > 0) && (*(p - 1) != '\n')) {
  	justifyX = x + JustifyOffset(attrPtr, text, length, (int *)NULL);
! 	Tk_DrawChars(display, draw, gc, (Tk_Font) gc->font,
! 		     text, length, justifyX, y);
      }
  }
  
Index: blt8.0-unoff/win/bltWinBgexec.c
diff -c blt8.0-unoff/win/bltWinBgexec.c:1.2 blt8.0-unoff/win/bltWinBgexec.c:1.3
*** blt8.0-unoff/win/bltWinBgexec.c:1.2	Mon Dec 14 03:10:56 1998
--- blt8.0-unoff/win/bltWinBgexec.c	Thu Apr 15 01:24:31 1999
***************
*** 759,764 ****
--- 759,779 ----
      if ((flags & TRACE_FLAGS) == 0) {
  	return NULL;
      }
+ #if 1
+     if ((bgPtr->pidArr != NULL) && (bgPtr->killSignal > 0)) {
+ 	register int i;
+ 	LONG err;
+ 
+ 	for (i = 0; i < bgPtr->numPids; i++) {
+ #ifdef __WIN32__
+ 	    TerminateProcess(bgPtr->pidArr[i], 512);
+ 	    err = GetLastError();
+ #else
+ 	    kill(bgPtr->pidArr[i], (int)bgPtr->killSignal);
+ #endif
+ 	}
+     }
+ #endif
      if (bgPtr->outputChan) {
  	Tcl_DeleteChannelHandler(bgPtr->outputChan, BackgroundProc,
  				 (ClientData)bgPtr);
***************
*** 818,823 ****
--- 833,839 ----
      }
      Tcl_UntraceVar2(interp, part1, part2, TRACE_FLAGS, CleanupProc, clientData);
  
+ #if 0
      if ((bgPtr->pidArr != NULL) && (bgPtr->killSignal > 0)) {
  	register int i;
  
***************
*** 829,834 ****
--- 845,851 ----
  #endif
  	}
      }
+ #endif
      Tcl_EventuallyFree((ClientData)bgPtr,
          (Tcl_FreeProc *)DestroyBackgroundInfo);
      return NULL;
Index: blt8.0-unoff/win/makefile.vc
diff -c blt8.0-unoff/win/makefile.vc:1.1.1.2 blt8.0-unoff/win/makefile.vc:1.2
*** blt8.0-unoff/win/makefile.vc:1.1.1.2	Thu Aug 20 23:01:34 1998
--- blt8.0-unoff/win/makefile.vc	Thu Apr 15 01:25:25 1999
***************
*** 3,8 ****
--- 3,11 ----
  DLL_VER=80
  BLTWISH=$(THIS)wish$(DLL_VER).exe
  
+ # Comment the following line to compile with symbols
+ NODEBUG=1
+ 
  !include $(ROOT)\win\mkfiles\makefile.ini
  
  
***************
*** 36,45 ****
  		$(OBJDIR)\bltTile.obj \
  		$(OBJDIR)\bltButton.obj \
  		$(OBJDIR)\bltWinButton.obj \
- 		$(OBJDIR)\bltWinXDrawString.obj \
  		$(OBJDIR)\bltFrame.obj \
  		$(OBJDIR)\bltScrollbar.obj \
  		$(OBJDIR)\bltPie.obj
  
  WISH_OBJS=	$(OBJDIR)\bltWinMain.obj \
  		$(OBJDIR)\tkConsole.obj
--- 39,48 ----
  		$(OBJDIR)\bltTile.obj \
  		$(OBJDIR)\bltButton.obj \
  		$(OBJDIR)\bltWinButton.obj \
  		$(OBJDIR)\bltFrame.obj \
  		$(OBJDIR)\bltScrollbar.obj \
  		$(OBJDIR)\bltPie.obj
+ #		$(OBJDIR)\bltWinXDrawString.obj
  
  WISH_OBJS=	$(OBJDIR)\bltWinMain.obj \
  		$(OBJDIR)\tkConsole.obj
